version: 2
aliases:

  # SSH Deployment key for github Pushing,
  - &deploy_ssh_fingerprint "4d:ef:59:3c:a4:28:0d:92:f7:3d:79:9c:b9:e0:56:8f"

  # add the GitHub Deployment Key to the ssh-agent
  # @see https://circleci.com/docs/2.0/add-ssh-key/
  - &run_task_add_key
    add_ssh_keys:
      fingerprints:
        - *deploy_ssh_fingerprint

  # add github.com to known_hosts list, this is required for pushing changes.
  - &run_task_add_gh_known_hosts
    run:
      name: Keyscan Github (HACK)
      command: |
        mkdir -p ${HOME}/.ssh
        chmod 700 ${HOME}/.ssh
        ssh-keyscan -H github.com >> ${HOME}/.ssh/known_hosts
        chmod 644 ${HOME}/.ssh/known_hosts

  # Configure git user settings
  # @see https://help.github.com/articles/setting-your-username-in-git/
  - &run_task_configure_git
    run:
      name: configure git set global settings
      command: |
        git config --global user.email "$GIT_AUTHOR_EMAIL"
        git config --global user.name "${CIRCLE_USERNAME}"

  # @see https://github.com/aktau/github-release
  # Used container for handle github release actions
  - &container_releasemanager
    docker:
      - image: circleci/golang:1.8

  # @see https://stedolan.github.io/jq/
  # used for better JSon Command Line parsing.
  - &run_task_prepare_jq
    run:
      name: install jq to path
      command: |
        sudo wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /usr/bin/jq
        sudo chmod +x /usr/bin/jq

  # @see https://github.com/aktau/github-release
  # install go tool for creating the github release
  - &run_task_prepare_github-release-manager
    run:
      name: install aktau/github-release manager
      command: |
        go get github.com/aktau/github-release

  # Load the latest GitHub Release
  # Reuqired jq in the path
  # @see https://developer.github.com/v3/repos/releases/#get-the-latest-release
  - &run_task_load_latest_ghrelease
    run:
      name: Load the Latest GH Release
      command: |
        LAST_VERSION="$(curl https://${GITHUB_TOKEN}@api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest | jq -r '.tag_name' )"
        echo $LAST_VERSION > /tmp/workspaces/last_release.txt

  # Load one version behind the latest GitHub Release
  # Reuqired jq in the path
  # @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository
  - &run_task_load_previous_ghrelease
    run:
      name: Load the Previous GH Release
      command: |
        PREVIOUS_VERSION="$(curl https://${GITHUB_TOKEN}@api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases | jq -r '.[1].tag_name' )"
        echo $PREVIOUS_VERSION > /tmp/workspaces/previous_release.txt

  # extract the current version from the .bumpversion.cfg
  # save the extractd version to /tmp/workspaces/current_version.txt for later use
  # @see https://github.com/peritus/bumpversion
  - &run_task_load_current_version_bumpversion_cfg
    run:
      name: Load the Current Version from .bumpversion.cfg
      command: |
        CURRENT_VERSION="$(cat .bumpversion.cfg | grep current_version | sed -r s,"^.*=",, | sed 's/ //')"
        echo $CURRENT_VERSION > /tmp/workspaces/current_version.txt

  # Pushing the created gh page to the branch gh-pages, this faild if the branch not exists!
  # TODO: harder this task, create the branch if not exists
  # TODO: extract target branch name to env
  - &run_task_push_github_page
    run:
      command: |
        git clone $CIRCLE_REPOSITORY_URL --branch gh-pages --single-branch /tmp/ghpage
        cd /tmp/ghpage
        git rm -rf .
        cp -r /tmp/workspaces/html/. /tmp/ghpage
        git add -A
        git commit -m "[ci skip] Automated deployment to GitHub Pages: ${CIRCLE_SHA1}" --allow-empty
        git push origin gh-pages

  # @see https://circleci.com/docs/2.0/language-python/
  # Used container for python based uilds
  - &container_python
    docker:
      - image: circleci/python:3.6.4

  # @see https://tox.readthedocs.io/en/latest/install.html
  # Install tox required system dependencies
  - &run_task_install_tox_dependencies
    run:
      name: install tox dependencies
      command: |
        sudo apt-get -qq update
        sudo apt install -y build-essential libssl-dev libpython-dev python python-pip

  - &var_python_tox_venv "${HOME}/venv/tox"

  - &run_task_python_create_env
    run:
      name: install tox dependencies
      command: |
        virtualenv -p python3.6 ${VENV_NAME}
      environment:
        VENV_NAME: *var_python_tox_venv

  - &run_task_python_install_tox
    run:
      name: install tox dependencies
      command: |
        virtualenv -p python3.6 ${VENV_NAME}
        . ${VENV_NAME}
        pip install tox
      environment:
        VENV_NAME: *var_python_tox_venv"/bin/activate"


  # @see http://chromedriver.chromium.org/
  # install chromedriver for selenium tests
  - &run_task_install_chromedriver_dependencies
    run:
      name: install chromedriver
      command: |
        wget -q https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip -O /tmp/chromedriver_linux64.zip
        mkdir ${HOME}/chromedriver
        unzip /tmp/chromedriver_linux64.zip -d ${HOME}/chromedriver
        chmod +x ${HOME}/chromedriver
        sudo sh /tmp/workspaces/build/ci-scripts/install_selenium_dependencies.sh

jobs:

  # generate a changelog from existing github commits/pull requests
  # using https://github.com/ferrarimarco/docker-github-changelog-generator as generate container
  # the container wraps https://github.com/github-changelog-generator/github-changelog-generator
  generate-changelog:
    machine: true
    working_directory: /tmp/workspaces/changelog
    steps:
      - *run_task_prepare_jq
      - *run_task_load_latest_ghrelease
      - run:
          name: generate CHANGELOG.md
          command: |
            LAST_VERSION="$(cat /tmp/workspaces/last_release.txt)"
            docker run -it --rm -v "$(pwd)":/usr/local/src/your-app ferrarimarco/github-changelog-generator:1.15.0.pre.beta --user ${CIRCLE_PROJECT_USERNAME} --project ${CIRCLE_PROJECT_REPONAME} --token ${GITHUB_TOKEN} --since-tag $LAST_VERSION --no-unreleased
      - store_artifacts:
          path: /tmp/workspaces/changelog
      - persist_to_workspace:
          root: /tmp/workspaces/changelog
          paths:
              - CHANGELOG.md

  builddocs:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_install_tox_dependencies
      - *run_task_python_create_env
      - *run_task_python_install_tox
      - run:
          name: build the sphinx documentation
          command: |
            . ${VENV_NAME}
            tox -e docs
          environment:
            VENV_NAME: *var_python_tox_venv
      - store_artifacts:
          path: .tox/docs/tmp/html
          destination: sphinx
      - persist_to_workspace:
          root: /tmp/workspaces/build/.tox/docs/tmp
          paths:
              - html

  publishghpage:
    <<: *container_python
    working_directory: /tmp/workspaces/html
    steps:
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_configure_git
      - *run_task_add_key
      - *run_task_add_gh_known_hosts
      - *run_task_push_github_page

  statictests:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_install_tox_dependencies
      - run:
          name: execute the flake8 static tests
          command: |
            tox -e flake8
      - store_test_results:
          path: .tox/test/tmp/reports
  testing:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_install_tox_dependencies
      - run:
          name: execute the pytests documentation
          command: |
            tox -e py36-test,py27-test
      - store_test_results:
          path: .tox/test/tmp/reports

  finializebuild:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - *run_task_configure_git
      - *run_task_add_key
      - *run_task_add_gh_known_hosts
      - attach_workspace:
          at: /tmp/workspaces
      - run:
          name: Push changes to github if release build
          command: |
            if [ -f /tmp/workspaces/release_build.txt ]; then
                echo "File not found!"
                releaseBranch="$(cat /tmp/workspaces/release_build.txt)"
                git push origin release/$releaseBranch
                git push origin ${CIRCLE_BRANCH}
            fi

  check_grade_up_build:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    steps:
      - *run_task_configure_git
      - *run_task_add_key
      - *run_task_install_tox_dependencies
      - checkout
      - run:
          name: install bumpversion
          command: |
            sudo pip install bumpversion
      - run:
          name: check is release build
          command: |
            GIT_COMMIT_DESC=$(git log --format=%B -n 1 $CIRCLE_SHA1)
            echo $GIT_COMMIT_DESC
            if [[ $GIT_COMMIT_DESC =~ "GradeUP" ]] && [[ $CIRCLE_BRANCH == "develop" ]];
            then
              echo "match"
              currentVersion=$(bumpversion --allow-dirty --dry-run --list release | grep new_version | sed -r s,"^.*=",,)
              bumpversion --commit release
              git checkout -b release/v$currentVersion-pre
              git checkout develop
              bumpversion --commit minor
              echo "v$currentVersion-pre" > /tmp/workspaces/release_build.txt
            else
               echo "classic build"
            fi
      - persist_to_workspace:
          root: /tmp/workspaces
          paths:
              - build/*
              - release_build.txt

  integrate_release:
    <<: *container_releasemanager
    working_directory: /tmp/workspaces/build
    steps:
      - *run_task_prepare_jq
      - *run_task_configure_git
      - *run_task_add_key
      - *run_task_add_gh_known_hosts
      - attach_workspace:
          at: /tmp/workspaces
      - run:
          name: merge to master
          command: |
            git checkout master
            git merge ${CIRCLE_BRANCH}
            echo "merge to master"
      - *run_task_load_current_version_bumpversion_cfg
      - run:
          name: create release tag
          command: |
            CURRENT_VERSION="$(cat /tmp/workspaces/current_version.txt)"
            git tag v$CURRENT_VERSION
            git push origin v$CURRENT_VERSION
      - persist_to_workspace:
          root: /tmp/workspaces
          paths:
              - build/*

  create_gh_release:
    <<: *container_releasemanager
    working_directory: /tmp/workspaces/build
    steps:
      - *run_task_prepare_jq
      - *run_task_configure_git
      - *run_task_add_key
      - *run_task_add_gh_known_hosts
      - *run_task_prepare_github-release-manager
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_load_current_version_bumpversion_cfg
      - run:
          name: create github pre-release
          command: |
            CURRENT_VERSION="$(cat /tmp/workspaces/current_version.txt)"
            message="$(cat /tmp/workspaces/CHANGELOG.md)"
            github-release release \
                --user ${CIRCLE_PROJECT_USERNAME} \
                --repo ${CIRCLE_PROJECT_REPONAME} \
                --tag "v${CURRENT_VERSION}" \
                --name "v${CURRENT_VERSION}" \
                --description "${message}" \
                --pre-release
      - run:
          name: delete the release branch
          command: |
            git push origin master
            git push origin --delete ${CIRCLE_BRANCH}

  execute_integration_tests:
    <<: *container_python
    working_directory: /tmp/workspaces/build
    environment:
      CHROMEDRIVER_VERSION: 2.45
      TOX_TEST_ENV: py36-github-integrationtests
    steps:
      - attach_workspace:
          at: /tmp/workspaces
      - *run_task_install_tox_dependencies
      - *run_task_install_chromedriver_dependencies
      - run:
          name: execute selenium integrationtests
          command: |
            export PATH=$PATH:${HOME}/chromedriver
            tox -e ${TOX_TEST_ENV}
            mkdir -p /tmp/workspaces/testreports
            cp -r .tox/${TOX_TEST_ENV}/tmp/reports/ /tmp/workspaces/testreports
      - store_test_results:
          path: /tmp/workspaces/testreports
      - persist_to_workspace:
          root: /tmp/workspaces/
          paths:
              - testreports

workflows:
  version: 2
  execute_smoke_test:
    jobs:
      - check_grade_up_build
      - statictests:
          requires:
            - check_grade_up_build
      - execute_integration_tests:
          requires:
            - statictests
      - builddocs:
          requires:
            - statictests
      - testing:
          requires:
            - statictests
  build_and_test:
    jobs:
      - check_grade_up_build
      - statictests:
          requires:
            - check_grade_up_build
      - builddocs:
          requires:
            - statictests
      - testing:
          requires:
            - statictests
      - publishghpage:
          requires:
            - builddocs
            - testing
          filters:
            branches:
              only:
                - master
      - finializebuild:
          requires:
            - testing
            - builddocs
      - integrate_release:
          filters:
            branches:
              only:
                - /release\/v.*-pre/
          requires:
            - finializebuild
      - generate-changelog:
          requires:
            - integrate_release
      - create_gh_release:
          requires:
            - generate-changelog
      - execute_integration_tests:
          requires:
            - publishghpage
